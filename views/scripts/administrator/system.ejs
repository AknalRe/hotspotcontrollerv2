<script src="/socket.io/socket.io.js"></script>
<script>
    const mikrotikstatus = '<%= mikrotik %>';
    // console.log("Mikrotik :",mikrotikstatus);
    function bytesToMegabytes(bytes) {
        const megabytes = bytes / (1024 * 1024);
        return megabytes;
    }

    const socket = io();
    if (mikrotikstatus) {
        toastToast(true, "", "Memproses mengambil info router")
        socket.on('resource', function (data) {
            // console.log(data.data[0]);
            const resource = data.data[0];
            document.getElementById("info-mikrotik-cpu").innerHTML = resource["cpu-load"] + "%";
            document.getElementById("info-mikrotik-memory").innerHTML = bytesToMegabytes(resource["free-memory"]).toFixed(0) + "MB";
        })

        socket.on('userhotspot', function (data) {
            const hotspot = data.data;
            // console.log(hotspot);
            document.getElementById("info-mikrotik-user-hotspot-aktif").innerHTML = hotspot.length;
        })
    }
</script>
<script>
    let id;
    let serv;

    function getdataserv() {
        toastToast(true, "", "Memproses mengambil info sistem hotspot");
        fetch('/getfileservjs', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            toastToast(true, "", "Berhasil mengambil info sistem hotspot");
            const contents = data.response.contents;
            const regex = /(\w+):\s*"(.*?)"/g;
            const result = {};
            let match;

            // Iterasi melalui semua hasil regex
            while ((match = regex.exec(contents)) !== null) {
                result[match[1]] = match[2];
            }
            id = data.response[".id"];
            serv = result;
            updateserv(result);
        })
        .catch(error => {
            console.log('Error:', error);
            toastToast(false, "", "Gagal mengambil info sistem hotspot");
        });
    }

    getdataserv();

    function updateserv(result) {
        const container = document.getElementById('config-container');
        container.innerHTML = ''; // Clear previous content

        for (const [key, value] of Object.entries(result)) {
            const div = document.createElement('div');
            div.className = 'form-group';

            // Tentukan tipe input berdasarkan jenis nilai
            let inputType = typeof value === 'number' ? 'number' : 'text';

            div.innerHTML = `
                <label for="${key}">${key}:</label>
                <input type="${inputType}" id="${key}" class="form-control" value="${value}" />
            `;
            container.appendChild(div);
        }


        document.getElementById('save-btn').addEventListener('click', () => {
            const updatedResult = {};
            Object.keys(result).forEach(key => {
                let value = document.getElementById(key).value;
                // Konversi ke angka jika memungkinkan
                if (!isNaN(value) && !isNaN(parseFloat(value))) {
                    value = parseFloat(value);
                }
                updatedResult[key] = value;
            });
            toastToast(true, "", "Memproses mengupdate sistem hotspot");

            const newserv = `let serverConfig = ${convertObjectToString(updatedResult)};`;
            console.log(id, newserv, updatedResult);
            saveserv(id, newserv, updatedResult);
        });
    }

    function convertObjectToString(obj) {
        let result = '{\n';
        for (const [key, value] of Object.entries(obj)) {
            // Jika nilai bisa dikonversi ke angka dan tidak ada karakter selain angka dan titik desimal, simpan sebagai angka
            if (!isNaN(value) && !isNaN(parseFloat(value))) {
                result += `  ${key}: ${parseFloat(value)},\n`;
            } else {
                result += `  ${key}: "${value}",\n`;
            }
        }
        // Hapus koma terakhir dan tambahkan kurung penutup
        result = result.replace(/,\n$/, '\n');
        result += '}';
        return result;
    }

    function saveserv(id, newserv, updatedResult) {
        const formData = {
            id: id,
            contents: newserv,
            data: updatedResult
        };

        fetch('/updateservjs', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        })
        .then(response => response.json())
        .then(data => {
            toastToast(data.success, "", data.message);
            if (data.success) {
                setTimeout(() => {
                    serv = null;
                    getdataserv();
                }, 1000);
            }
        })
        .catch(error => {
            console.log('Error:', error);
            toastToast(false, "", "Gagal mengupdate sistem hotspot");
        });
    }
</script>